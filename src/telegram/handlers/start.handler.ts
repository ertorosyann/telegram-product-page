import { Injectable } from '@nestjs/common';
import { Context } from 'src/types/context.interface';
import { getMainMenuKeyboard } from '../utils/manu';

import { Markup } from 'telegraf';
import { UsersService } from '../authorization/users.service';
@Injectable()
export class StartHandler {
  private readonly templateLink = process.env.YANDEX_LINK || '';
  private readonly adminUsername = 'Romiksar';

  constructor(private readonly userService: UsersService) {}
  async handle(ctx: Context) {
    const telegramUsername = ctx.from?.username;
    if (!telegramUsername) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram username.');
      return;
    }
    const text = [
      'üëã *–î–æ–±—Ä–æ‚ÄØ–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –ø–æ–∏—Å–∫—É —Ü–µ–Ω –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏\\!*',
      '',
      '–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å:',
    ].join('\n');

    const buttons = [
      [Markup.button.url('üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel', this.templateLink)],
      [
        Markup.button.callback(
          'üìù –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π –∑–∞–ø—á–∞—Å—Ç–∏',
          'single_part_request',
        ),
      ],
      [Markup.button.callback('üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª', 'document')],
    ];
    const isAdmin = await this.userService.isAdmin(ctx.from?.username || '');
    if (isAdmin) {
      buttons.push([
        Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'add_user'),
        Markup.button.callback('‚ûï –í–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'all_users'),
        Markup.button.callback('‚ûï –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'delete_user'),
      ]);
    } else {
      const isAllowed = await this.userService.isUserAllowed(telegramUsername);

      if (!isAllowed) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
      }
    }

    await ctx.reply(text, {
      parse_mode: 'MarkdownV2',
      ...getMainMenuKeyboard(),
      ...Markup.inlineKeyboard(buttons),
    });
  }
}
