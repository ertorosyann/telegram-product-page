import { Injectable } from '@nestjs/common';
import { Context } from 'src/types/context.interface';
// import { scrapeAll } from '../scraper';
import { Message } from 'telegraf/typings/core/types/typegram';
import { getMainMenuKeyboard } from '../utils/manu';
import { UsersService } from '../authorization/users.service';
import { StockService } from 'src/stock/stock.service';
// import { ResultRow } from '../exel/exel.types';
// import { compareItems } from '../exel/comparator.exelFiles';
import { normalizeInput } from '../utils/validator';
import {
  compareItemTextHandler,
  InputText,
} from '../textMsg/comparator.textMsg';

@Injectable()
export class TextHandler {
  constructor(
    private readonly usersService: UsersService,
    private readonly stockService: StockService,
  ) {}

  async handle(ctx: Context) {
    if (ctx.session.step === 'single_part_request') {
      const start = performance.now();
      const message = ctx.message as Message.TextMessage;
      const textMessage = message?.text?.trim();

      if (!textMessage) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
        return;
      }

      console.log('text =', textMessage); // –ü—Ä–∏–º–µ—Ä: 1979322 , 1, CAT

      const parts = textMessage.split(',').map((part) => part.trim());

      let artikul = '';
      let qtyStr = '1'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
      let brand = '';

      if (parts.length === 3) {
        [artikul, qtyStr, brand] = parts;
        // const num = Number(qtyStr);
        // if (!isNaN(num) && isFinite(num) && num > 0) {
        //   await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1979322, 1, CAT');
        // }
      } else if (parts.length === 2) {
        let second: string;
        [artikul, second] = parts;
        if (!isNaN(Number(second))) {
          qtyStr = second;
        } else {
          brand = second;
        }
      } else if (parts.length === 1) {
        artikul = parts[0];
      } else {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1979322, 1, CAT');
        return;
      }

      const qty = Number(qtyStr);

      if (!artikul || isNaN(qty) || qty < 1) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä: 1979322, 1, CAT');
        return;
      }

      await ctx.reply(
        'üîÑ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
      );

      const nameItem = normalizeInput(artikul);
      console.log(nameItem, qty, brand, ' = userna poisk twe');

      const checkItem: InputText = { name: nameItem, qty, brand };

      try {
        /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–∑–º–µ–Ω–µ–Ω–æ: now scrapeAll returns ScrapedProduct[] ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

        const skladItems = this.stockService.getStock();
        console.log(
          skladItems.length > 0 ? 'sklad is done !' : 'sklad dont loaded',
        );

        // const { rows } = await compareItems(
        //   [
        //     {
        //       '‚Ññ': '1',
        //       '–∫–∞—Ç.–Ω–æ–º–µ—Ä': nameItem.trim(),
        //     },
        //   ],
        //   skladItems,
        // );

        const { messages } = await compareItemTextHandler(
          checkItem,
          skladItems,
        );
        console.log(message, '+++!!!!');

        /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
        // const msg = formatResults(rows);

        await ctx.reply(messages);
        const durationSec = ((performance.now() - start) / 1000).toFixed(2);
        await ctx.reply(`‚è± –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ ${durationSec} —Å–µ–∫—É–Ω–¥.`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã –∏ –Ω–∞–ª–∏—á–∏—è:', error);
        await ctx.reply(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.',
        );
      }
      ctx.session.step = undefined;
      console.log(performance.now() - start, '----verjnakan text------');
      await ctx.reply(
        'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ Excel-—Ñ–∞–π–ª, –∏ –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º.\n\n' +
          'üìå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n' +
          '‚úÖ –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 12345, 1, CAT\n' +
          '‚úÖ –ë–µ–∑ –±—Ä–µ–Ω–¥–∞: 12345, 1\n' +
          '‚úÖ –ë–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: 12345, CAT\n' +
          '‚úÖ –¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª: 12345\n\n' +
          'üîÅ –ü–æ—Ä—è–¥–æ–∫: –∞—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±—Ä–µ–Ω–¥\n' +
          '‚ùóÔ∏è –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫.',
      );
    } else if (ctx.session.step == 'add_user') {
      const message = ctx.message as Message.TextMessage;
      const textMessage = message?.text?.trim();

      if (!textMessage) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }

      await this.usersService.addUser({ telegramUsername: textMessage });
      await ctx.reply('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
      ctx.session.step = undefined;
      await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n‚Äî ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üë• –†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
        {
          parse_mode: 'MarkdownV2',
          ...(await getMainMenuKeyboard(
            ctx.from?.username || '',
            this.usersService,
          )),
        },
      );
      await ctx.reply(
        'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ Excel-—Ñ–∞–π–ª, –∏ –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º.\n\n' +
          'üìå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n' +
          '‚úÖ –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 12345, 1, CAT\n' +
          '‚úÖ –ë–µ–∑ –±—Ä–µ–Ω–¥–∞: 12345, 1\n' +
          '‚úÖ –ë–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: 12345, CAT\n' +
          '‚úÖ –¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª: 12345\n\n' +
          'üîÅ –ü–æ—Ä—è–¥–æ–∫: –∞—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±—Ä–µ–Ω–¥\n' +
          '‚ùóÔ∏è –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫.',
      );
    } else if (ctx.session.step === 'delete_user') {
      const message = ctx.message as Message.TextMessage;
      const textMessage = message?.text?.trim();

      if (!textMessage) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }
      const resultOfDelate = await this.usersService.deleteUser({
        telegramUsername: textMessage,
      });
      await ctx.reply(resultOfDelate);
      ctx.session.step = undefined;
      await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n‚Äî ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üë• –†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
        {
          parse_mode: 'MarkdownV2',
          ...(await getMainMenuKeyboard(
            ctx.from?.username || '',
            this.usersService,
          )),
        },
      );
      await ctx.reply(
        'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ Excel-—Ñ–∞–π–ª, –∏ –º—ã –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º.\n\n' +
          'üìå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n' +
          '‚úÖ –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: 12345, 1, CAT\n' +
          '‚úÖ –ë–µ–∑ –±—Ä–µ–Ω–¥–∞: 12345, 1\n' +
          '‚úÖ –ë–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: 12345, CAT\n' +
          '‚úÖ –¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª: 12345\n\n' +
          'üîÅ –ü–æ—Ä—è–¥–æ–∫: –∞—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –±—Ä–µ–Ω–¥\n' +
          '‚ùóÔ∏è –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç–æ–π –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫.',
      );
    }
  }
}

// util/format-result.ts
// function formatResults(results: ResultRow[]): string {
//   if (!results.length) {
//     return '‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
//   }

//   const row = results[0]; // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É

//   const excludeKeys = [
//     'name',
//     'kalichestvo',
//     'luchshayaCena',
//     'summa',
//     'luchshiyPostavshik',
//   ];

//   const prices: { shop: string; price: number }[] = Object.entries(row)
//     .filter(
//       ([key, value]) =>
//         !excludeKeys.includes(key) && typeof value === 'number' && value > 0,
//     )
//     .map(([shop, price]) => ({
//       shop,
//       price: Number(price), // –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ —á–∏—Å–ª—É
//     }));

//   if (!prices.length) {
//     return '‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
//   }

//   const best = prices.reduce((min, cur) => (cur.price < min.price ? cur : min));

//   return `‚úÖ *–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞!*\n\nüè¨ –ú–∞–≥–∞–∑–∏–Ω: *${best.shop}*\nüîß –î–µ—Ç–∞–ª—å: _${row.name}_\nüí∞ –¶–µ–Ω–∞: *${best.price}*`;
// }
