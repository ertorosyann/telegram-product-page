import { Injectable } from '@nestjs/common';
import { Context } from 'src/types/context.interface';
import axios from 'axios';
import * as XLSX from 'xlsx';
import * as fs from 'fs';
import { Message } from 'telegraf/typings/core/types/typegram';

interface ExcelRow {
  'part name'?: string;
  qty: string;
}

interface skladItem {
  'p/n': string;
  'part name': string;
  qty: string;
  'price, RUB': string;
  'sum, RUB': string;
}

@Injectable()
export class DocumentHandler {
  private readLocalFile(filePath: string): skladItem[] {
    const localFile = fs.readFileSync(filePath);
    const workbook = XLSX.read(localFile, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    return XLSX.utils.sheet_to_json<skladItem>(worksheet);
  }

  async handle(ctx: Context) {
    if (ctx.session.step === 'document') {
      const message = ctx.message;
      if (!message || !('document' in message)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª.');
        return;
      }

      const documentMessage = message as Message.DocumentMessage;
      const { document } = documentMessage;
      const fileName = document.file_name;

      if (
        !fileName ||
        (!fileName.endsWith('.xlsx') && !fileName.endsWith('.xls'))
      ) {
        await ctx.reply(
          '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.xlsx` –∏–ª–∏ `.xls`',
        );
        return;
      }

      try {
        const processingMessage = await ctx.reply(
          'üîç –ò–¥—ë—Ç –ø–æ–∏—Å–∫ –ø–æ —Å–∫–ª–∞–¥—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.',
        );
        const fileLink = await ctx.telegram.getFileLink(document.file_id);
        const response = await axios.get<ArrayBuffer>(fileLink.href, {
          responseType: 'arraybuffer',
        });

        const fileBuffer = Buffer.from(response.data);
        const workbookUser = XLSX.read(fileBuffer, { type: 'buffer' });
        const sheetNameUser = workbookUser.SheetNames[0];
        const worksheetUser = workbookUser.Sheets[sheetNameUser];

        const inputFile = XLSX.utils.sheet_to_json<ExcelRow>(worksheetUser);

        const localFilePath = '/Users/picsartacademy/Desktop/sklad.xlsx'; // –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
        const sklad = this.readLocalFile(localFilePath); // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
        const itemsNotFoundInSklad: ExcelRow[] = [];

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤
        const compareItems = (inputFile: ExcelRow[], sklad: skladItem[]) => {
          const result: string[] = [];

          // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          inputFile.forEach((inputItem) => {
            if (!inputItem['part name'] || !inputItem.qty) return;

            const itemFound = sklad.find(
              (skladItem) => skladItem['part name'] === inputItem['part name'],
            );

            if (itemFound) {
              if (itemFound.qty >= inputItem.qty) {
                // –ï—Å–ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞
                result.push(
                  `–¢–æ–≤–∞—Ä  ${inputItem['part name']} –Ω–∞–π–¥–µ–Ω! –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${inputItem.qty} —à—Ç.  ‚úÖ`,
                );
              } else {
                // –ï—Å–ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–∞, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è
                result.push(
                  `–¢–æ–≤–∞—Ä–∞  ${inputItem['part name']} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${inputItem.qty} —à—Ç., –Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–ª—å–∫–æ ${itemFound.qty} —à—Ç. ‚ûñ`,
                );
                itemsNotFoundInSklad.push(inputItem);
              }
            } else {
              // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
              result.push(
                `–¢–æ–≤–∞—Ä  ${inputItem['part name']} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ. ‚ùå`,
              );
              itemsNotFoundInSklad.push(inputItem);
            }
          });

          return result;
        };
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–¥—ë—Ç –ø–æ–∏—Å–∫

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–∫–ª–∞–¥–æ–º
        const comparisonResult = compareItems(inputFile, sklad);

        const finalMessage = comparisonResult.length
          ? comparisonResult.join('\n')
          : '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.';

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const chatId = 'chat' in message ? message.chat.id : undefined;
        if (chatId) {
          await ctx.telegram.editMessageText(
            chatId,
            processingMessage.message_id,
            undefined,
            finalMessage,
          );
        } else {
          // fallback, –µ—Å–ª–∏ chatId –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
          await ctx.reply(finalMessage);
        }
        console.log(itemsNotFoundInSklad);

        ctx.session.step = undefined; // —Å–±—Ä–æ—Å —à–∞–≥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        return;
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞:', err);
        await ctx.reply(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.',
        );
      }
    }
  }
}
