import { Injectable } from '@nestjs/common';
import { Context } from 'src/types/context.interface';
import { Message } from 'telegraf/typings/core/types/typegram';
import { parseExcelFromTelegram, readLocalExcel } from '../exel/parse.and.read';
import { compareItems } from '../exel/comparator.exelFiles';
import { createResultExcelBuffer } from '../exel/generator.createResultExcel';
import { InputExelFile, ParsedRow } from '../exel/exel.types';

@Injectable()
export class DocumentHandler {
  async handle(ctx: Context) {
    const message = ctx.message;
    if (!message || !('document' in message)) {
      return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel‚Äë—Ñ–∞–π–ª.');
    }

    const { document } = message as Message.DocumentMessage;
    const fileName = document.file_name ?? '';

    if (!/\.xlsx?$/.test(fileName)) {
      return ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º `.xlsx` –∏–ª–∏ `.xls`');
    }

    try {
      await ctx.reply('üîç –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–∫–ª–∞–¥—É...');

      const inputItems: InputExelFile[] = await parseExcelFromTelegram(
        document.file_id,
        ctx.telegram,
      );

      if (!inputItems.length) {
        return ctx.reply('–í–∞—à —Ñ–∞–π–ª Excel –ø—É—Å—Ç–æ–π.');
      }

      const skladItems: ParsedRow[] = readLocalExcel(
        '/Users/picsartacademy/Desktop/sklad2.xlsx',
      );

      const { messages, rows } = await compareItems(inputItems, skladItems);

      const resultBuffer = createResultExcelBuffer(rows);

      for (const msg of messages) await ctx.reply(msg);

      await ctx.reply('–§–∞–π–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é‚Ä¶');

      await ctx.replyWithDocument({
        source: resultBuffer,
        filename: 'result.xlsx',
      });

      ctx.session.step = undefined;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel:', err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.');
    }
  }
}
