import { Injectable } from '@nestjs/common';
import {
  InjectBot,
  Start,
  Help,
  On,
  Ctx,
  Update,
  Action,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { Context } from 'src/types/context.interface';
import { StartHandler } from './handlers/start.handler';
import { TextHandler } from './handlers/text.handler';
import { HelpHandler } from './handlers/help.handler';
import { HttpService } from '@nestjs/axios';
import { DocumentHandler } from './handlers/document.handler';
import { UsersService } from './authorization/users.service';
import { UserHandler } from './handlers/user.handleer';
import { getMainMenuKeyboard } from './utils/manu';
import { createReadStream, existsSync } from 'fs';
import { join } from 'path';

@Injectable()
@Update()
export class TelegramService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly httpService: HttpService,
    private readonly startHandler: StartHandler,
    private readonly textHandler: TextHandler,
    private readonly helpHandler: HelpHandler,
    private readonly documentHandler: DocumentHandler,
    private readonly userHandler: UserHandler,

    private readonly usersService: UsersService, // ‚úÖ inject it
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await this.startHandler.handle(ctx);
  }

  @Help()
  async onHelp(@Ctx() ctx: Context) {
    await this.helpHandler.handle(ctx);
  }

  @On('message')
  async onMessage(@Ctx() ctx: Context) {
    const message = ctx.message;

    if (!message) {
      await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
      return;
    }
    if (ctx.session.step === 'add_user' || ctx.session.step === 'delete_user') {
      await ctx.sendChatAction('typing');
      await ctx.reply('‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
      await this.textHandler.handle(ctx);
      return;
    }

    if ('document' in message) {
      ctx.session.step = 'document';
      await ctx.reply(
        'üìÇ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...',
      );
      await this.documentHandler.handle(ctx);
    } else if ('text' in message) {
      ctx.session.step = 'single_part_request';
      await ctx.reply(
        '‚úâÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...',
      );
      await this.textHandler.handle(ctx);
    } else {
      await ctx.reply('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  }

  @Action('template_excel_download')
  async onTemplateExcelDownload(@Ctx() ctx: Context) {
    let filePath = join(process.cwd(), 'dist', 'assets', 'template.xlsx');

    if (!existsSync(filePath)) {
      filePath = join(process.cwd(), 'src', 'assets', 'template.xlsx');
    }
    try {
      await ctx.replyWithDocument({
        source: createReadStream(filePath),
        filename: '–®–∞–±–ª–æ–Ω.xlsx',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∞–±–ª–æ–Ω–∞ Excel:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞.');
    }
  }

  @Action('add_user')
  async onAddUser(@Ctx() ctx: Context) {
    ctx.session.step = 'add_user';
    await ctx.answerCbQuery();
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Username(James123) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
  @Action('delete_user')
  async onDeleteUser(@Ctx() ctx: Context) {
    ctx.session.step = 'delete_user';
    await ctx.answerCbQuery();
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ Username(James123)  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }

  @Action('all_users')
  async onAllUsers(@Ctx() ctx: Context) {
    await this.userHandler.handle(ctx);
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n‚Äî ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Äî üë• –†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      {
        parse_mode: 'MarkdownV2',
        ...(await getMainMenuKeyboard(
          ctx.from?.username || '',
          this.usersService,
        )),
      },
    );
  }
}
