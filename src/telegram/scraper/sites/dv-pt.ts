import puppeteer from 'puppeteer';

export async function scrapeDvPt(
  name: string,
  count: string,
  brand: string,
): Promise<string> {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();

  try {
    await page.goto('https://dv-pt.ru/', {
      waitUntil: 'domcontentloaded',
      timeout: 30000,
    });

    // –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
    await page.type('#search_form_input', name);
    await page.keyboard.press('Enter');

    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await page.waitForSelector('.goods', { timeout: 15000 });

    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
    const firstProductLinkSelector = '.goods a[itemprop="url"]';

    await page.waitForSelector(firstProductLinkSelector, { timeout: 10000 });
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'domcontentloaded' }),
      page.click(firstProductLinkSelector),
    ]);

    // –ñ–¥—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —á—Ç–æ-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
    await page.waitForSelector('h1', { timeout: 10000 });
    // –ó–∞–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const result = await page.evaluate(() => {
      const title =
        document.querySelector('h1')?.textContent?.trim() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const price =
        document.querySelector('.price')?.textContent?.trim() ||
        document.querySelector('.catalog_group_price')?.textContent?.trim() ||
        '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      const brand =
        document
          .querySelector('.brand_img')
          ?.getAttribute('style')
          ?.match(/images\/brand\/(.+?)\.jpg/)?.[1] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const quantity =
        document.querySelector('.info.inStock')?.textContent?.trim() ||
        '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏';

      return `üîç –ù–∞–π–¥–µ–Ω–æ –Ω–∞ voltag.ru\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${title}\n–ë—Ä–µ–Ω–¥: ${brand}\n–¶–µ–Ω–∞: ${price}\n–ù–∞–ª–∏—á–∏–µ: ${quantity}`;
    });
    // console.log(result);
    await browser.close();
    return result;
  } catch (error: any) {
    await browser.close();
    return `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ dv-pt: ${error.message}`;
  }
}
