import axios from 'axios';
import * as cheerio from 'cheerio';

export async function scrapeCamsParts(
  name: string,
  count: string,
  brand: string,
): Promise<string> {
  try {
    const searchQuery = name.trim().replace(/\s+/g, '+');
    const searchUrl = `https://spb.camsparts.ru/katalog-cummins/?search=${searchQuery}`;

    const response = await axios.get(searchUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0',
      },
    });

    const $ = cheerio.load(response.data);

    const product = $('.product_wrap').first(); // –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

    if (!product.length) {
      return `‚ùå [CamsParts] –¢–æ–≤–∞—Ä "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
    }

    const title =
      product.find('.product .product__info .product__title').text().trim() ||
      '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const price =
      product
        .find('.product .product__info .price .price__new ')
        .text()
        .trim() || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    const availability =
      product.find('.product .product__info .quantity').text().trim() ||
      '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

    return `üîç –ù–∞–π–¥–µ–Ω–æ –Ω–∞ spb.camsparts.ru\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${title}\n–ë—Ä–µ–Ω–¥: ${brand}\n–¶–µ–Ω–∞: ${price}\n–ù–∞–ª–∏—á–∏–µ: ${availability}`;
  } catch (error: any) {
    return `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ CamsParts: ${error.message}`;
  }
}
